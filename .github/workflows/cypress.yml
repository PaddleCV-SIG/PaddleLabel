name: E2E Tests

on:
  workflow_call:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build PaddleLabel package"]
    branches: [develop]
    types:
      - completed
  schedule:
    - cron: "0 12 * * *"

jobs:
  e2e_test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        node-version: ["19.x"]

        # python-version: ["3.11", "3.10", "3.9", "3.8"]
        os: [ubuntu-latest, windows-latest, macos-latest]

        python-version: ["3.11"]
        # os: [windows-latest, ubuntu-latest, macos-latest]
        # os: [ubuntu-latest]

      fail-fast: false

    steps:
      - name: Setup mamba env ${{ matrix.python-version }}
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: false
          environment-name: PaddleLabel
          extra-specs: |
            python=${{ matrix.python-version }}
          cache-env: true
          channels: conda-forge

      - name: Parallel - download 3rd party tests and install paddlelabel
        run: |
          echo ${{ steps.download_whl.outputs }}
          {
          mkdir -p ~/测试路径/3rd_party/
          cd ~/测试路径/3rd_party/
          curl -LO https://github.com/linhandev/static/releases/download/PaddleLabel%E7%9B%B8%E5%85%B3/paddlelabel_3rd_party_tests.zip
          echo ----------------------------------
          ls
          unzip -q paddlelabel_3rd_party_tests.zip
          pwd
          ls
          } &
          bgid=$!
          echo $bgid

          # download latest build
          curl -LO https://nightly.link/PaddleCV-SIG/PaddleLabel/workflows/build/develop/PaddleLabel_built_package.zip
          unzip PaddleLabel_built_package.zip

          # install latest build
          echo ========================================================
          pip uninstall paddlelabel -y
          pip install paddlelabel-*-py3-none-any.whl

          # wait for bg job
          wait $bgid
          res=$?
          ls ~/测试路径/3rd_party/
          if [ $res -ne 0 ]
          then
            exit $res
          fi

      - name: Checkout frontend project
        uses: actions/checkout@v3
        with:
          repository: PaddleCV-SIG/PaddleLabel-Frontend
          ref: paddlelablOcr

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Download last run screenshots
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: cypress.yml
          workflow_conclusion: failure
          name: Cypress_test_logs_${{ matrix.os }}_${{ matrix.python-version }}
          path: ../
          if_no_artifact_found: ignore

      - name: Get failed tests, run them first later
        id: test_order
        run: |
          cd ..
          if [ -f Cypress_test_logs_${{ matrix.os }}_${{ matrix.python-version }}.tar.gz ]
          then
            tar -xvf Cypress_test_logs_${{ matrix.os }}_${{ matrix.python-version }}.tar.gz
          fi
          cd -

          pwd
          ls
          echo "tests=$(python cypress/order_tests.py)" >> $GITHUB_OUTPUT

      - name: Run tests
        uses: cypress-io/github-action@v5
        id: test
        with:
          working-directory: ./cypress
          browser: chrome
          config: baseUrl=http://localhost:1111
          env: os=${{ matrix.os }}
          spec: ${{ steps.test_order.outputs.tests }}
          wait-on: "http://localhost:1111"
          wait-on-timeout: 40
          start-windows: yarn run test:win
          start: yarn run test:unix

      - name: Backend logs, cypress screenshots
        if: failure()
        run: |
          cd ./cypress/cypress/
          tar_name=Cypress_test_logs_${{ matrix.os }}_${{ matrix.python-version }}.tar.gz
          tar czvf $tar_name *
          ls -lah $tar_name
          echo https://transfer.sh/$tar_name

          curl --upload-file "$tar_name" "https://transfer.sh/$tar_name"

      - name: Upload run logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: Cypress_test_logs_${{ matrix.os }}_${{ matrix.python-version }}
          path: |
            ./cypress/cypress/Cypress_test_logs_${{ matrix.os }}_${{ matrix.python-version }}.tar.gz
