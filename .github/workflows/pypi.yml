name: Publish PaddleLabel to pypi

on: [workflow_dispatch]


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
        node-version: ["16.x"]

    steps:
      - name: Check out frontend project
        uses: actions/checkout@master
        with:
          repository: PaddleCV-SIG/PaddleLabel-Frontend

      - name: ls
        run: |
          ls .
          pwd

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Cache node_modules
        id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
        uses: actions/cache@v3
        env:
          cache-name: cache-node_modules2
        with:
          path: ./node_modules/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install yarn
        run: |
          npm i --global yarn

      - name: Install node_modules
        # if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: |
          yarn
          echo "$GITHUB_WORKSPACE/node_modules/.bin" >> $GITHUB_PATH- uses: actions/checkout@v3

      # - run: |
      #     # ls -la
      #     ls -la node_modules
      #     echo "======"
      #     ls -la node_modules/.bin
      #     echo "$GITHUB_WORKSPACE/node_modules/.bin" >> $GITHUB_PATH- uses: actions/checkout@v3

      - name: Build frontend
        run: |
          npm run build

      - name: Move built frontend
        run: |
          mv dist/ ..

      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine wheel
          # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Bump version
        run: |
          python tool/bumpversion.py

      - name: Config basic git info
        run: git config --global user.email "bot@github.com" && git config --global user.name "Action Bot"

      - name: Update version
        run: git add paddlelabel/version; git commit -m "bump version"; git push

      - name: Copy built frontend
        run: |
          mv ../dist/ ./paddlelabel/static/

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

#       - name: Publish to PyPI
#         uses: pypa/gh-action-pypi-publish@release/v1
#         with:
#           user: __token__
#           password: ${{ secrets.PADDLELABEL_PUBLISH_API_TOKEN }}
